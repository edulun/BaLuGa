# Registers:
# 2 Bit:
#	$imm current	
#	$t1	 number of succesful entries
#	$t2	 current memory value
# 3 Bit:
#	$s1	last memory position
#	$s2	jump address
#	$s3	counts the number of bits checked in the current entry

#   need to add poker instruction

Start:
	shg 		0, 0010 			# start at position 32
	stt 		$imm, $s1		# $s1 = initial memory pos
    shg         0, 0000 
    slw         0, 0111          # jump address = CheckEntry
    stt         $imm, $s2       # $s2 = jump address
    slw         1, 0010          # branch = +2 (skip next instruction) 

CheckEntry:
	ld 		    $imm, $t2	    # load next entry to $imm
    pkr         $imm            # check entry with pkr instrc
    beq         $imm, $zero     # skip inc if not a succesful entry
    inc         $t1             # succesful entry

CheckAndMoveToNext:

    stf         $imm, $s2       # set imm = jump address
    inc         $t2             # increment memory number
    blt         $t2, $s1
    jmp         $imm 

End: 
    stl         1, 0x_          # set imm = memory where the count of
    sth         1, 0x_          # succesful entries will be stored. 

    st          $t2, $branch     
    halt 
