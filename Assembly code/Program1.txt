# 2 bit:
#	$imm -  temp variable
#	$t1 low - stores the low bits
#	$t2 high - stores the high bits
# 3 bit:
#	$s1 op1 - first operand
#	$s2 op2 - second operand
#	$s3 counter - helps keep track how many additions have been done
#	$bran

//TODO: ADD CARRYOUT IN $IMM

Start:

slw     $imm, 0001
ld      $t1, $imm
stf     $t1, $s1
inc     $imm
ld      $t1, $imm
stf     $t1, $s2
stt     $t1, $zero

_Start

MainLoop (Instruction 8):

stt   	$imm, $s1			# $imm = $s1  (Operand 1)
aon 	$imm	   			# $imm = $imm[0] & 0x1

stl		1,0010 				# Set $branch = Continue (+2)
sth		1,0000  				# Set $branch = Continue (+2)
be      $imm, $zero			# If ($imm == 0) branch to Continue

_MainLoop

Addlow:

stf   	$imm, $s2			# $imm = $s2 (Operand 2)
sll		$imm, $s3 			# Shift left by $s3(Counter) number of bits
add     $t1, $imm			# $t1 (Low result bits) += $imm (carryout in $imm)

_AddLow

AddHigh:

slw		1, 0x2				# Set $branch = Continue (+2)
shg		1, 0x0				# Set $branch = Continue (+2)
beq     $imm, $zero         # no carryOut
inc     $t2                 # assign carryOut

stt     $imm, $s2           # imm = operand 2
swp     $t1, $s3            # swap with counter
seg     $t1                 # counter = 8 - counter
slr     $imm, $t1           # shift by 8 - counter
seg     $t1                 # counter = 8 - counter
swp     $t1, $s3            # swap counter <-> low bits
add     $t2, $imm           # add to high bits

_AddHigh

Continue:

slw 	0, 0001		        # $imm = 0 
shg		0, 0000			    

swp     $imm, $s1
slr    	$imm, $s1 			# shift operand 1 right once
swp     $imm, $s1
swp     $imm, $s3
inc		$imm	 			    # counter +=1
swp     $imm, $s3

slw     1, 0011
shg     1, 1100
beq     $zero, $s2          # GO TO MAINLOOP

_Continue

End:

slw 	0, 3		
shg 	0, 0				# $Imm = 0x3
st 		$t1, $imm 			# Mem[3] = $t1 
inc 	$imm				# $imm = 4
st 		$t2, $imm 			# Mem[4] = $t2
halt    

_End
